# List of conversion from solps variable name to ggd object structure
# Format:
# <solps_var_name>: [path_to_value_object, grid_subset_index]
# path_to_value_object is a string written in same format as IMAS schema table
# For choosing an instance of an object in array, use [] for giving index
# For appending to the object array, use [:]
# Example:
# na: ["ion[1].temperature[:].values", 5]translates to ggd[it].ion[1].temperature[end].values
#    where ggd[it].ion[1].temperature will be resized to add a new last entry
# grid_subset_index needs to be provided to indicate where the quantity is defined

# In order from SOLPS-ITER_user_manual_2020-03-12.pdf (page 219, A.3 b2cdcv.F)

# --------
# Page 219
na: ["ion[:].density[:].values", 5]
ua: ["ion[:].velocity[:].parallel", 5]
te: ["electrons.temperature[:].values", 5]
ti: ["t_i_average[:].values", 5] # atom(ion) temperature is averaged over all species, so only store in t_i_average
po: ["phi_potential[:].values", 5]

# --------
# Page 221
# nb, ub ignored since this data is already stored in na
# ni ignored since this is simply sum over all na

# --------
# Page 222
ne: ["electrons.density[:].values", 5]
# ne2 Different weighing, need to look closer later
# pr, pz ignored for now, seem like derived quantities
pe: ["electrons.pressure[:].values", 5]
# ro, rz mass density of atoms or just ions, IMAS.dd instead stores element atomic mass in ion. TO DO
# ne2m ignored, derived quantity

# --------
# Page 224
# uadiax: [ion[:].velocity[:].poloidal, ]
# uadiay: [ion[:].velocity[:].radial, ]

# In order from SOLPS-ITER_user_manual_2020-03-12.pdf (page 387, E. Quantities stored in b2time.nc)

# --------
# Page 391
ne2d: ["electrons.density[:].values", 5]
te2d: ["electrons.temperature[:].values", 5]
ti2d: ["t_i_average[:].values", 5] # atom(ion) temperature is averaged over all species, so only store in t_i_average
